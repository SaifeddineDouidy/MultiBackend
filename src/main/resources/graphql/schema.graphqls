type Query {
    getReservation(id: ID!): Reservation
    getReservations: [Reservation]
}

type Mutation {
    createReservation(input: ReservationInput!): Reservation
    updateReservation(id: ID!, input: ReservationInput!): Reservation
    deleteReservation(id: ID!): Boolean
}

type Reservation {
    id: ID
    client: Client
    checkInDate: Date
    checkOutDate: Date
    typeChambre: TypeChambre
}

input ReservationInput {
    clientId: ID
    checkInDate: Date
    checkOutDate: Date
    typeChambre: TypeChambre
}

type Client {
    id: ID
    firstName: String
    lastName: String
    email: String
    phoneNumber: String
    dateOfBirth: String
}

enum TypeChambre {
    SINGLE,
    DOUBLE,
    TWIN,
    SUITE,
    DELUXE,
    FAMILY,
    PRESIDENTIAL,
    STUDIO,
    CONNECTING,
    ACCESSIBLE,
    PENTHOUSE,
    CABANA,
    BUNGALOW,
    VILLA,
    ECONOMY
}
scalar Date